Metadata-Version: 2.4
Name: agentic-architect
Version: 0.1.0
Summary: Multi-agent JSON-to-Code generation system using OpenAI agentic SDK
Author: Kimi Agent
License: MIT License
        
        Copyright (c) 2025 jrapisarda
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: openai>=2.3.0
Requires-Dist: pydantic>=2.12
Requires-Dist: pydantic-settings>=2.5
Requires-Dist: sqlalchemy>=2.0
Requires-Dist: duckduckgo-search>=6.2.6
Requires-Dist: jsonschema>=4.23
Requires-Dist: typer>=0.15.1
Requires-Dist: rich>=13.9
Requires-Dist: tenacity>=9.0
Requires-Dist: python-dotenv>=1.0
Requires-Dist: pyyaml>=6.0
Provides-Extra: dev
Requires-Dist: pytest>=8.3; extra == "dev"
Requires-Dist: pytest-cov>=6.0; extra == "dev"
Requires-Dist: coverage>=7.6; extra == "dev"
Requires-Dist: black>=24.10; extra == "dev"
Requires-Dist: ruff>=0.7.4; extra == "dev"
Requires-Dist: mypy>=1.13; extra == "dev"
Requires-Dist: pre-commit>=4.0; extra == "dev"
Requires-Dist: bandit>=1.7; extra == "dev"
Requires-Dist: safety>=3.2; extra == "dev"
Dynamic: license-file

# Agentic Architect

Agentic Architect is a multi-agent system that transforms structured JSON specifications into complete, production-ready software projects. It leverages the OpenAI Agentic SDK and the `kimi-k2-0905-preview` model to coordinate specialised agents for requirements analysis, code generation, testing, documentation, quality enforcement, and version control.

## Features

- **Multi-agent pipeline** with dedicated agents for requirements, code generation, testing, documentation, quality assurance, and git operations.
- **SQLite-backed state management** for coordination, caching, and recovery of agent runs.
- **Pattern caching** to reuse proven architectural templates across projects.
- **Web research integration** via DuckDuckGo search for filling specification gaps using current best practices.
- **JSON schema validation** ensuring specifications conform to an expected structure before execution.
- **Quality tooling** including Black, Ruff, MyPy, Bandit, Safety, and pre-commit hooks.
- **Comprehensive testing setup** with pytest, coverage enforcement, and structured test plans.

## Getting Started

### Prerequisites

- Python 3.12+
- Access to an OpenAI-compatible endpoint exposing the `kimi-k2-0905-preview` model
- SQLite (bundled with Python)

### Installation

```bash
pip install -e .[dev]
```

### Configuration

Environment variables prefixed with `AGENTIC_` control runtime behaviour. The most important settings are:

- `AGENTIC_OPENAI__API_KEY` – API key for the OpenAI-compatible service
- `AGENTIC_OPENAI__BASE_URL` – Base URL when targeting a self-hosted gateway
- `AGENTIC_DATABASE__URL` – Path to the SQLite database
- `AGENTIC_WORKSPACE_ROOT` – Root directory where generated projects are created

Settings can also be provided via a `.env` file in the project root.

### Usage

```bash
agentic-architect generate path/to/spec.json --workspace /tmp/workspace
```

This command validates the JSON specification, coordinates all agents, and writes the generated project to the workspace directory.

### Example Specification

An example specification is available at `src/agentic_architect/examples/bioinformatics_etl_cli.json`.

### Development Workflow

- Format code with `black` and `ruff`
- Run static checks with `mypy`
- Execute tests via `pytest`
- Security scans using `bandit` and `safety`

Pre-commit hooks are provided for consistent tooling across contributors.

## Testing

```bash
pytest
```

## License

Distributed under the MIT License. See `LICENSE` for more information.
