{
  "project_type": "nextjs-dashboard",
  "tasks": [
    "Initialise repository structure and configuration.",
    "Generate baseline code scaffolding aligning with requirements.",
    "Create smoke tests to validate critical paths."
  ],
  "commands": [
    "git init",
    "npm create next-app@latest . --use-npm --ts --app --eslint",
    "npm install @tanstack/react-table"
  ],
  "files": [
    "README.md",
    "tests/",
    "app/page.tsx",
    "app/layout.tsx"
  ],
  "notes": "Implementation plan \u2014 nextjs-dashboard (concise)\n\nGoal: Build a typed, testable Next.js dashboard with auth, API, DB, reusable UI components, and CI/CD based on the previously analysed requirements and generated artifacts (requirements doc, user stories, acceptance criteria, ERD, API contracts, component inventory, wireframes).\n\n1) Tech & infra decisions (brief)\n- Next.js (App Router, TypeScript)\n- Tailwind CSS for styling + CSS variables\n- Prisma + PostgreSQL for persistent data\n- NextAuth (Auth.js) or Clerk for authentication & sessions\n- TanStack Query (react-query) or SWR for data fetching / caching\n- Charting: Recharts / Chart.js / ApexCharts\n- Testing: Vitest + Testing Library + Playwright (E2E)\n- Lint + Format: ESLint + Prettier\n- CI: GitHub Actions; deploy to Vercel / Render / Docker\n\n2) High-level milestones / key coding tasks (in priority order)\n- Project bootstrap & config\n  - Create Next.js app with TypeScript and app router\n  - Add linting, formatting, Tailwind, CI skeleton\n- Data layer and auth\n  - Prisma schema, migrations, seed data\n  - Implement authentication (login, signup, session)\n- API & business logic\n  - Implement server RPC/REST routes (app/api or /api)\n  - Implement authorization checks\n- Dashboard shell & routing\n  - Global layout, sidebar, top nav, responsive behavior\n  - Protected routes (redirect to login)\n- Reusable UI components & design system\n  - Form inputs, tables, cards, data widgets, modals, toasts\n  - Chart components\n- Pages & flows\n  - Dashboard overview (widgets + charts)\n  - Entity CRUD pages (list, details, create/edit)\n  - Settings / user profile / admin views\n- State & caching\n  - Setup QueryClient, global stores (if needed)\n- Tests & quality\n  - Unit tests for core services/components\n  - Integration tests for API handlers\n  - E2E tests for key user flows\n- DevOps & deployment\n  - Dockerfile (optional), GitHub Actions CI, environment config\n  - Vercel/Render deployment config\n- Documentation & handoff\n  - README, env docs, API contract (OpenAPI), component inventory\n\n3) Recommended commands (examples using pnpm; adapt to npm/yarn)\n- Bootstrap:\n  - pnpm create next-app@latest my-dashboard -- --typescript --app\n  - cd my-dashboard\n- Install main deps:\n  - pnpm add prisma @prisma/client next-auth react-query axios tailwindcss postcss autoprefixer\n  - pnpm add -D eslint prettier vitest @testing-library/react @testing-library/jest-dom\n- Tailwind init:\n  - npx tailwindcss init -p\n- Prisma init/migrate:\n  - npx prisma init\n  - npx prisma migrate dev --name init\n  - npx prisma generate\n- Run:\n  - pnpm dev\n  - pnpm build\n  - pnpm start\n- Lint/format/test:\n  - pnpm lint\n  - pnpm format\n  - pnpm test\n- Seed DB (example):\n  - node prisma/seed.ts\n- CI A/C:\n  - git add . && git commit -m \"init\"\n  - push to remote (triggers CI)\n\n4) Primary files & folders to create (minimum viable set)\n- root\n  - package.json, pnpm-lock.yaml (or yarn.lock), next.config.js, tsconfig.json\n  - .env.example, README.md, Dockerfile (optional)\n  - .eslintrc.cjs, .prettierrc, .github/workflows/ci.yml\n- app/ (Next.js App Router)\n  - app/layout.tsx (global layout + providers)\n  - app/page.tsx (marketing / landing or redirect to dashboard)\n  - app/dashboard/layout.tsx (dashboard shell with sidebar)\n  - app/dashboard/page.tsx (dashboard overview)\n  - app/(auth)/login/page.tsx, app/(auth)/signup/page.tsx\n  - app/api/\u2026 route handlers (if using app router API routes)\n- src/\n  - components/\n    - NavBar.tsx, Sidebar.tsx, Pagination.tsx, DataTable.tsx\n    - Card.tsx, MetricWidget.tsx, Chart.tsx, Modal.tsx, Form.tsx\n  - lib/\n    - prisma.ts (Prisma client wrapper)\n    - auth.ts (NextAuth config)\n    - api.ts (axios/ fetch wrapper)\n    - validators/ (zod schemas)\n  - hooks/\n    - useUser.ts, useAuthRedirect.ts, useQueryHooks.ts\n  - services/\n    - users.service.ts, metrics.service.ts, widgets.service.ts\n  - styles/\n    - globals.css (Tailwind imports), variables.css\n  - prisma/\n    - schema.prisma, seed.ts\n- tests/\n  - unit/, integration/, e2e/\n- config/\n  - tailwind.config.js, postcss.config.js\n- infra/\n  - docker-compose.yml (Postgres for dev), terraform/optional\n- monitoring/docs\n  - openapi.yaml (API contract), ERD.png, requirements.md, component-inventory.md\n\n5) API / DB artifacts to produce\n- prisma/schema.prisma + migrations\n- seed data script\n- openapi.yaml or lightweight API spec for all endpoints used by front-end\n- authorization matrix (which roles can call which endpoints)\n- sample Postman collection (optional)\n\n6) Minimal development workflow (day-1 checklist)\n- Initialize project + install dependencies\n- Configure Tailwind + global styles\n- Setup Prisma + local Postgres + run initial migration + seed\n- Implement NextAuth + login page + protected redirect\n- Create dashboard layout + sample widget + fetch data from API\n- Add tests for auth and one API route\n- Add CI skeleton and .env.example\n\n7) Estimates & priorities (suggested)\n- Day 0.5: bootstrap, repo, lint/format\n- Day 1: Prisma schema + auth + seed\n- Day 2: Dashboard shell + routes + a couple widgets\n- Day 3\u20134: CRUD pages, charts, components\n- Day 5: Tests, CI, docs, deploy\n\nIf you want, I can:\n- Output a ready-to-run shell command sequence for initial bootstrap\n- Generate the initial project file tree and starter files (layout, auth config, prisma schema)\n- Produce an OpenAPI API spec draft or ERD from the earlier artifacts\n\nWhich next step would you like?"
}